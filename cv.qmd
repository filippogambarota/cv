---
name: "Filippo Gambarota, <span class='phd'>PhD</span>"
email: filippo.gambarota@unipd.it
github: filippogambarota
twitter: fgambarota
date: today
date-format: long
birth: "Camposampiero (PD, Italy) 22<sup>nd</sup> July 1994"
orcid: "`r filor::fil()$orcid`"
bibliography: "files/ref.bib"
filters:
  - files/dociteproc.lua
  - files/boldname.lua
citeproc: false
suppress-bibliography: true
link-citations: false
citations-hover: false
csl: "files/apa-cv.csl"
format: 
  html:
    page-layout: article
    css: files/cv.css
    template: files/template.html
    toc: true
    toc-title: Sections
    embed-resources: false    
    output-file: index
    output-ext: html
    link-external-newwindow: true
knitr:
  opts_chunk:
    echo: false
title: Filippo Gambarota
---

```{r}
#| label: setup
#| include: false

library(RefManageR)
library(tidyverse)
library(googledrive)
library(here)
library(scholar)
library(kableExtra)
library(ggraph)
library(igraph)
library(rscopus)
devtools::load_all()

drive_auth("filippo.gambarota@gmail.com")
cv <- get_online_cv()
bib <- get_publications()
BibOptions(sorting = "ydnt")
NoCite(bib)
if(!file.exists(here("files", "signature.png"))) download_sign()
fg_scholar_id <- "f836QNAAAAAJ"
fg_scholar <- get_profile(fg_scholar_id)
scholar_data <- get_citation_history(fg_scholar_id)
fg_scholar_pubs <- scholar::get_publications(fg_scholar_id)

fg_scopus <- tryCatch(
        #this is the chunk of code we want to run
        {
          scopus <- rscopus::author_df(au_id = "57211586127", verbose = FALSE)
          scopus_citations <- as.numeric(scopus$`citedby-count`)
          fg_scopus <- list(
            total_citations = sum(scopus_citations),
            h_index = h_index(scopus_citations),
            n_articles = length(scopus_citations),
            date = Sys.Date()
            )
          to_db(fg_scopus, "fg_scopus")
          return(fg_scopus)
        }, error = function(e){
          fg_scopus <- from_db("fg_scopus")
          return(fg_scopus)
        }
)
```

```{r}
#| label: toapa
#| include: false

conf_apa <- sprintf("%s (%s). *%s*. %s. %s.", 
        cv$conferences$authors,
        cv$conferences$date,
        cv$conferences$title,
        cv$conferences$conference,
        cv$conferences$place) |> 
  bold_my_name() |> 
  gsub("\\.\\.", "\\.", x = _) |>
  as.list()

nn <- sprintf("%s_%s_%s",
        unname(sapply(cv$conferences$authors, get_first_name)),
        cv$conferences$date,
        sapply(cv$conferences$conference, function(x) gsub(" ", "_", paste0(x, collapse = "_"))))

names(conf_apa) <- clean_for_name(nn)
```


```{r}
#| label: network
#| include: false

# thanks to https://eiko-fried.com/create-your-collaborator-network-in-r/

# library("qgraph")
# library("dplyr")
# 
# # pp <- PrintBibliography(bib, 
# #                   .opts = list(bib.style = "authoryear", 
# #                                sorting = "ydnt", 
# #                                max.names = 100)) |> 
# #   capture.output()
# # 
# # end <- c(grep("^\\s*$", pp))
# # start <- c(1, end + 1)
# # end <- c(end, length(pp))
# # 
# # pp <- mapply(function(s, e) pp[s:e], start, end)
# # pp <- lapply(pp, function(x) paste(x, collapse = ""))
# # pp <- unlist(pp)
# # writeLines(pp, "files/mypubs.txt")
# 
# # Load references:  
# refs <- readLines("files/mypubs.txt")
# 
# authors <- refs %>% 
#   # First remove everything from date onwards:
#   gsub("\\(.*","",.) %>% 
#   # Remove asterix:
#   gsub("\\*","",.) %>%
#   # Make lowercase:
#   tolower %>%
#   # Remove spaces:
#   gsub("\\s*","",.) %>%
#   # Remove &
#   gsub("\\&","",.) %>%
#   # Split on .,:
#   strsplit(split="(?<=\\.),",perl=TRUE) %>%
#   # Remove periods and everything following:
#   lapply(function(x)gsub("\\..*","",x))
# 
# # Collect unique authors:
# allAuthors <- unique(unlist(authors))
# 
# # Create list 
# SymXDis <- do.call(cbind,lapply(authors,function(x){
#   1*(allAuthors %in% x)
# }))
# 
# # Make adjacency:
# adj <- SymXDis %*% t(SymXDis)
# 
# # Labels:
# labs <- gsub(",.*","",allAuthors)
# substr(labs,0,1) <- toupper(substr(labs,0,1))
# 
# # Plot:
# sha <- ifelse(allAuthors == "gambarota,f","square", "circle")
# names<-c(1:71)
# 
# # pdf("1network_full_numbers.pdf", width=6, height=4.5)
# # qgraph(adj, labels = names, nodeNames = labs, color = "#eeeeee",  shape=sha, vsize = 4, diag = FALSE,
# #        layout = "spring", edge.color = "#666666", repulsion = 0.90, 
# #        border.width=2, border.color='#444444', label.color="#555555", legend.cex=.15)
# # dev.off()
# 
# #pdf("2network_full_names.pdf")
# # qgraph(adj, labels = labs,color = "#eeeeee",  vsize = 5, diag = FALSE, shape=sha,
# #        layout = "spring", edge.color = "#666666", repulsion = 0.90, 
# #        border.width=2, border.color='#444444', label.color="#555555")
# #dev.off()

papers <- sapply(bib, function(entry) sapply(entry$author, function(aut) aut$family))

# flatten for authors with composite surnames

for(i in 1:length(papers)){
  if(is.list(papers[[i]])){
    papers[[i]] <- sapply(papers[[i]], function(x) paste(x, collapse = " "))
  }
}

papers <- sapply(papers, function(x) gsub("é", "è", x))
authors <- unique(unlist(papers))

in_paper <- lapply(papers, function(paper) authors %in% paper)
in_paper <- do.call(cbind, in_paper)

PUBS <- in_paper %*% t(in_paper)

graph <- graph_from_adjacency_matrix(PUBS, mode = "undirected", diag = FALSE)

V(graph)$degree <- degree(graph)
```


:::{.pdf .no-print}
Download the {{< fa file-pdf >}}  [PDF](cv.pdf) version
</br>
</br>
:::

I am a **postdoctoral researcher** in Psychometrics (SSD: PSIC-01/C, ex M-PSI/03) at the University of Padova, Department of Developmental Psychology and Socialization (DPSS) and **licensed clinical psychologist**.

**Research interests**:

- Meta-analysis
- Monte Carlo simulations for power and design analysis
- Multiverse analysis
- Statistical methods for replicability assessment

## Current position

```{r}
#| results: asis
#| echo: false

research <- cv$research |> 
  arrange(desc(order))

research <- cv$research[cv$research$order == 1, ]
research$details <- gsub("Supervisor:", "</br>**Supervisor:**", research$details)

research$details <- gsub("Co-supervisor:", "</br>**Co-supervisor:**", research$details)

research$details <- gsub("Project:", "**Project:**", research$details)

for(i in 1:nrow(research)){
  make_entry(research$title[i], 
             research$date[i],
             research$place[i],
             research$details[i])
  cat("\n\n")
}
```

## Academic roles

[2023 - ongoing]{.cvdate} 
[Expert (Cultore della Materia) of Psychometrics (PSIC-01/C ex M-PSI/03)]{.what} </br> *[Department of Developmental Psychology and Socialization, University of Padova, Italy]{.where}*

## Research

```{r}
#| results: asis
#| echo: false

research <- cv$research |> 
  arrange(desc(order))

research <- cv$research[cv$research$order != 1, ]
research$details <- gsub("Project:", "**Project:**", research$details)
for(i in 1:nrow(research)){
  make_entry(research$title[i], 
             research$date[i],
             research$place[i],
             research$details[i])
  cat("\n\n")
}
```

{{< pagebreak >}}

## Abroad

```{r}
#| results: asis
#| echo: false
abroad <- cv$abroad |> 
  arrange(desc(date))
abroad$title <- sprintf("%s (%s)", abroad$title, abroad$duration)
abroad$details <- put_before(abroad$details, "Supervisor", "</br>")
abroad$details <- bold_pattern(abroad$details, "Supervisor")

abroad$place <- sprintf("%s %s", abroad$place, flag(abroad$flag))

for(i in 1:nrow(abroad)){
  make_entry(abroad$title[i],
           abroad$date[i],
           abroad$place[i],
           abroad$details[i])
  cat("\n\n")
}
```


{{< pagebreak >}}

## Education

```{r}
#| results: asis
#| echo: false

education <- cv$main_education |> 
  arrange(order)
education$details <- gsub("Supervisor:", "</br>**Supervisor:**", education$details)

education$details <- gsub("Co-supervisor:", "</br>**Co-supervisor:**", education$details)

education$details <- gsub("Project:", "**Project:**", education$details)

for(i in 1:nrow(education)){
  make_entry(education$title[i], 
             education$date[i],
             education$place[i],
             education$details[i])
  cat("\n\n")
}
```

## Training

```{r}
#| results: asis
#| echo: false

training <- cv$training |> 
  arrange(desc(date))
for(i in 1:nrow(training)){
  title <- sprintf("%s (%s)", training$title[i], training$duration[i])
  make_entry(title, 
             training$date[i],
             training$place[i],
             training$details[i])
  cat("\n\n")
}
```

{{< pagebreak >}}

## Awards

```{r}
#| results: asis
#| echo: false
cv$awards |> 
  arrange(desc(date)) |> 
  format_all(format_awards)
```

{{< pagebreak >}}

## Teaching

[*[planned]* means that the course has been officially scheduled but not delivered yet]{.details}

### PhD

```{r}
#| results: asis
#| echo: false
phd <- cv$teaching |> 
  filter(type == "phd") |> 
  group_nest(title, details, date, month, keep = TRUE) |> 
  arrange(desc(date), desc(month))

for(i in 1:nrow(phd)){
  format_teaching(phd$data[[i]])
}
```

### Lectures on contract (docenze a contratto)

```{r}
#| results: asis
#| echo: false
cfu <- cv$teaching |> 
  filter(type == "cfu") |> 
  mutate(title = ifelse(nchar(title) > 67,
                        wrap_text(title, 37),
                        title)) |> 
  group_nest(title, details, keep = TRUE)

for(i in 1:nrow(cfu)){
  format_teaching(cfu$data[[i]])
}
```

### Seminars

```{r}
#| results: asis
#| echo: false
seminars <- cv$teaching |> 
  filter(type == "seminars") |> 
  group_nest(title, details, keep = TRUE)

for(i in 1:nrow(seminars)){
  format_teaching(seminars$data[[i]])
}
```

### Integrative teaching (didattica integrativa)

```{r}
#| results: asis
#| echo: false
integrative <- cv$teaching |> 
  filter(type == "integrative") |> 
  group_nest(title, details, keep = TRUE)

for(i in 1:nrow(integrative)){
  format_teaching(integrative$data[[i]])
}
```

### Methodological Schools

```{r}
#| results: asis
#| echo: false
schools <- cv$teaching |> 
  filter(type == "schools") |> 
  group_nest(title, details, keep = TRUE)

for(i in 1:nrow(schools)){
  format_teaching(schools$data[[i]])
}
```

### Lectures

```{r}
#| results: asis
#| echo: false
cv$teaching |> 
  filter(type == "lecture") |> 
  arrange(desc(month), order) |> 
  format_all(format_teaching)
```

## Supervision

```{r}
#| echo: false

supervision <- filter(cv$dissertations, finished == 1)
nmasters <- sum(supervision$degree == "Master's")
nbachelors <- sum(supervision$degree != "Master's")
```

- I have co-supervised **`r nmasters` Master's degree** dissertations and **`r nbachelors` Bachelor's degree** dissertations (Department of Developmental Psychology and Socialization, University of Padova, Italy).
- From 2017 to 2019 I supervised and coordinated the students during EEG training in the laboratory (Department of Developmental Psychology and Socialization, University of Padova, Italy)

:::{.no-print}

::: {.callout-note icon=false appearance="minimal" collapse=true}

## Dissertations

```{r}
supervision |> 
  mutate(Student = paste(name, surname)) |>
  select(Student, title, date, degree, -name, -surname) |> 
  rename_with(.fn = str_to_title) |> 
  rename("Year" = Date) |> 
  arrange(desc(Year), Student) |> 
  kable() |> 
  kable_styling(full_width = FALSE)
```

:::

:::

{{< pagebreak >}}

## Publications

[Journal impact factors and quartiles are taken from **Journal Citation Reports** considering the last available data]{.details}

```{r}
quartile <- table(cv$publications$Quartile)
quartile <- sprintf("**%s %s in %s journals (%s%%)**", 
                    quartile, 
                    ifelse(quartile > 1, "papers", "paper"),
                    names(quartile),
                    round((quartile / sum(quartile)) * 100, 2))
quartile <- paste0(quartile, collapse = ", ")
```

I published **`r length(bib)` papers** on journals with an **average impact factor of `r round(mean(cv$publications$IF), 1)`**. In terms of quartiles, I published `r quartile`.

```{r}
npreprint <- nrow(cv$preprint)
naccepted <- nrow(cv$accepted_publications)
nunderreview <- FALSE
```

#### Google Scholar

[*Last Update: `r Sys.Date()`* </br> *contains preprints, conference proceedings and redundant articles*]{.details}

- H-index: **`r fg_scholar$h_index`**
- Citations: **`r fg_scholar$total_cites`**
- Number of articles: **`r nrow(fg_scholar_pubs)`** 

#### Scopus

[*Last Update: `r fg_scopus$date`*]{.details}

- H-index: **`r fg_scopus$h_index`**
- Citations: **`r fg_scopus$total_citations`**
- Number of articles: **`r fg_scopus$n_articles`** 

```{r}
#| results: asis

cv$metrics <- cv$metrics[cv$metrics$service != "Scopus", ]
date <- sprintf("[*Last Update: %s*]{.details}", cv$metrics$updated)
h <- sprintf("- H-index: **%s**", cv$metrics$h)
cit <- sprintf("- Citations: **%s**", cv$metrics$citations)
art <- sprintf("- Number of articles: **%s**", cv$metrics$articles)

for(i in 1:nrow(cv$metrics)){
  cat("####", cv$metrics$service[i], "\n\n")
  cat(date[i], "\n\n")
  cat(h[i], "\n")
  cat(cit[i], "\n")
  cat(art[i], "\n\n")
}
```


:::{.no-print}

::: {.callout-note icon=false appearance="minimal" collapse=true}


## Citations Plot (Google Scholar)

```{r}
#| echo: false
scholar_data |> 
  ggplot(aes(x = year, y = cites)) +
  geom_point(size = 3) +
  geom_line() +
  xlab("Year") +
  ylab("# Citations") +
  theme_minimal(15)
```

:::

::: {.callout-note icon=false appearance="minimal" collapse=true}


## Co-authors network

```{r}
#| echo: false
#| fig-width: 10
#| fig-height: 10
#| fig-dpi: 300
#| include: false
qgraph(adj, labels = labs,color = "#eeeeee",  vsize = 5, diag = FALSE, shape=sha,
       layout = "spring", edge.color = "#666666", repulsion = 0.90, 
       border.width=2, border.color='#444444', label.color="#555555")
```

```{r}
#| fig-width: 10
#| fig-height: 10
#| dev: svg
ggraph(graph, layout = "fr") +  
  geom_edge_link(alpha = 0.5, color = "gray") +  
  geom_node_point(aes(size = degree), color = "steelblue") +  # Size mapped to degree
  geom_node_text(aes(label = authors), vjust = 3) +  
  scale_size(range = c(3, 10)) +  # Adjust node size range
  theme_void() +
  theme(legend.position = "none")
```

:::

:::

### Published (`r length(bib)`)

```{r}
keys <- names(sort(bib))
first_author <- sum(grepl("Gambarota", keys))
metr <- cv$publications[match(keys, cv$publications$key), ]
```

[<sup><b>c</b></sup> means that I am the corresponding author]{.details}

Among the `r length(bib)` publications, I have **`r first_author`** first-author papers and **`r sum(metr$Corresponding)`** papers with the role of corresponding author.

```{r}
#| results: asis
#| echo: false
#| eval: false

# NoCite(bib)
# PrintBibliography(bib, .opts = list(bib.style = "authoryear", sorting = "ydnt", max.names = 100)) |> 
#   capture.output() |> 
#   gsub(pattern = "Gambarota", replacement = "**Gambarota**", x = _) |> 
#   cat(sep = "\n")

bib_print <- PrintBibliography(bib, 
                               .opts = list(bib.style = "authoryear", 
                                            sorting = "ydnt", 
                                            max.names = 100)) |> 
  capture.output() |> 
  gsub(pattern = "Gambarota", replacement = "**Gambarota**", x = _)

end <- c(grep("^\\s*$", bib_print))
start <- c(1, end + 1)
end <- c(end, length(bib_print))

bib_list <- mapply(function(s, e) bib_print[s:e], start, end)
bib_list <- lapply(bib_list, function(x) x[!grepl("^\\s*$", x)])

bib_keys <- names(sort(bib))
names(bib_list) <- clean_for_name(bib_keys)

for(i in 1:length(bib_list)){
  metr <- filter(cv$publications, key == bib_keys[i])
  cat("1. ", bib_list[[i]], "\n")
  cat(sprintf("[IF: %s, Quartile: %s]", metr$IF[1], metr$Quartile[1]))
  cat("\n\n")
}
```

<!-- :::{#refs} -->
<!-- ::: -->

```{r}
#| results: asis

citations <- sprintf("1. %s @%s </br> *[IF: %s, Quartile: %s]* %s %s",
        ifelse(metr$Corresponding == 1, "<sup><b>c</b></sup>", ""),
        metr$key,
        metr$IF,
        metr$Quartile,
        link_with_icon(metr$osf),
        link_with_icon(metr$materials))

cat(citations, sep = "\n\n")
```

```{r include=naccepted > 0}
#| results: asis
header <- sprintf("Accepted/in press (%s)", naccepted)
pander::pandoc.header(header, 3)
```

```{r include=naccepted > 0}
#| results: asis
for(i in 1:nrow(cv$accepted_publications)){
  accepted <- sprintf(
    "- %s - %s - *%s* [%s]",
    bold_my_name(cv$accepted_publications$authors[i]),
    cv$accepted_publications$title[i],
    cv$accepted_publications$journal[i],
    cv$accepted_publications$status[i]
  )
  cat(accepted)
  cat("\n\n")
}
```

```{r include=!is.null(nunderreview > 0) & nunderreview > 0}
#| results: asis
header <- sprintf("Under Review (%s)", nunderreview)
pander::pandoc.header(header, 3)
```

```{r include=!is.null(nunderreview > 0) & nunderreview > 0, eval=!is.null(nunderreview > 0) & nunderreview > 0}
#| results: asis
for(i in 1:nrow(cv$under_review)){
  preprint <- sprintf(
      "%s - %s",
      bold_my_name(cv$under_review$authors[i]),
      cv$under_review$title[i]
    )
  if(!is.na(cv$under_review$preprint[i])){
    preprint <- paste(preprint, sprintf("[[Preprint](%s)]", cv$under_review$preprint[i]))
  }
  cat(preprint)
  cat("\n")
}
```

{{< pagebreak >}}

## Conferences

```{r}
nconf <- tapply(cv$conferences$title, cv$conferences$type, length)
```

### Invited Talks (`r nconf["Invited"]`)

```{r}
#| results: asis
cv$conferences |> 
  arrange(desc(date)) |> 
  filter(type == "Invited") |> 
  format_all(format_conf)
```

### Talks (`r nconf["Talk"]`)

[*[P]* means that I was the presenting author]{.details}
[*[accepted]* means that the talk has been accepted but not delivered yet]{.details}

```{r}
#| results: asis
cv$conferences |> 
  arrange(desc(date), desc(month)) |> 
  filter(type == "Talk") |> 
  format_all(format_conf)
```

### Posters (`r nconf["Poster"]`)

[*[P]* means that I was the presenting authors]{.details}
[*[accepted]* means that poster has been accepted but has not taken place yet]{.details}

```{r}
#| results: asis
cv$conferences |> 
  arrange(desc(date)) |> 
  filter(type == "Poster") |> 
  format_all(format_conf)
```

### Symposia (`r nconf["Symposium"]`)

[*[P]* means that I was the proponent]{.details}
[*[accepted]* means that symposium has been accepted but has not taken place yet.]{.details}

```{r}
#| results: asis
cv$conferences |> 
  arrange(desc(date)) |> 
  filter(type == "Symposium") |> 
  format_all(format_conf)
```

{{< pagebreak >}}

## Peer Reviews

:::{.no-print}
See my [Publons Profile](https://www.webofscience.com/wos/author/record/G-9799-2015)
:::

Ad-hoc reviewer for:

```{r}
#| echo: false
#| results: asis
cat(sprintf("- %s", cv$reviews$journal), sep = "\n")
```

## Academic memberships

```{r}
#| results: asis
#| echo: false
cv$memberships |> 
  format_all(format_memb)
```

## Organization

```{r}
#| results: asis
#| echo: false

other <- cv$other_academic |> 
  arrange(desc(date))

for(i in 1:nrow(other)){
  make_entry(other$title[i], 
             other$date[i],
             other$place[i],
             other$details[i])
  cat("\n\n")
}
```

{{< pagebreak >}}

## Third Mission (Terza Missione)

[*Section written in Italian*]{.details}

```{r}
#| results: asis
#| echo: false
#| include: true

terza_missione <- cv$terza_missione |> 
  mutate(date = gsub("\\.0", "", date)) |> 
  arrange(desc(date))

for(i in 1:nrow(terza_missione)){
  if(!is.na(terza_missione$iris_id[i])){
    details <- sprintf("%s **[Iris ID: %s]**", 
                       terza_missione$details[i], 
                       terza_missione$iris_id[i])
  }else{
    details <- terza_missione$details[i]
  }
  
  if(!is.na(terza_missione$materials[i])){
    details <- paste(details, link_with_icon(terza_missione$materials[i]))
  }
  
  if(!is.na(terza_missione$video[i])){
    details <- paste(details, sprintf("[%s](%s)", icon_from_file(".mp4"), terza_missione$video[i]))
  }
  
  make_entry(terza_missione$title[i], 
             terza_missione$date[i],
             terza_missione$place[i],
             details)
  cat("\n\n")
}
```

{{< pagebreak >}}

## Research groups membership

[2019 - ongoing]{.cvdate} [Psicostat - [psicostat.dpss.psy.unipd.it](https://psicostat.dpss.psy.unipd.it/)]{.what}

I am part of the [core team](https://psicostat.dpss.psy.unipd.it/people.html) of Psicostat founded by professors Massimiliano Pastore, Gianmarco Altoè and Livio Finos. We are an interdisciplinary research group working in areas related to quantitative psychology, psychometrics, psychological testing and statistics.

[2019 - ongoing]{.cvdate} [Colab [colab.psy.unipd.it](http://colab.psy.unipd.it/)]{.what}

The CoLab, established at the Department of Developmental Psychology of the University of Padova in the 2000, hosts a variety of research projects, which focus primarily on exploring the functional and neural mechanisms subserving attention and language abilities in human adults.

## Media Coverage

```{r}
#| results: asis
#| echo: false
#| include: true
media <- cv$media |> 
  arrange(desc(date))

link <- sub("^(https?://[^/]+).*", "\\1", media$link)
link <- gsub("^https://", "", link)

for(i in 1:nrow(media)){
  make_entry(media$what[i],
             lubridate::year(media$date[i]),
             link[i],
             paste(media$description[i], link_with_icon(media$link[i])))
  cat("\n\n")
}
```


## Collaborations

A selection of collaborations with scholars outside the School of Psychology (University of Padova)

```{r}
#| results: asis
coll <- cv$collaborations
coll$date <- sprintf("%s - ongoing", coll$date)
coll <- arrange(coll, desc(date))

for(i in 1:nrow(coll)){
  make_entry(
    coll$name[i],
    coll$date[i],
    coll$affiliation[i],
    coll$details[i]
  ) |> 
    cat("\n\n")
}
```

## Involvement in research groups

[2023 - ongoing]{.cvdate}[Research group on Multiverse analysis in generalized linear models and meta-analysis]{.what}

Member of a national research group about inference in multiverse for GLM and meta-analysis with Gianmarco Altoè (University of Padova), Anna Vesely (University of Bologna) and Livio Finos (University of Padova), Massimiliano Pastore (University of Padova), Paolo Girardi (Ca' Foscari University of Venice). The research group produced the following conference presentations and posters:

:::{.smaller}

- `r conf_apa$Gambarota_2024_META_REP`
- `r conf_apa$Girardi_2024_Association_for_Applied_Statistics_ASA`
- `r conf_apa$Gambarota_2024_La_Psicometria_tra_Oggi_e_Domani_Sfide_E_Nuovi_Orizzonti`
- `r conf_apa$Gambarota_2023_Society_for_the_Improvement_of_Psychological_Science_SIPS`

:::

[2023 - ongoing]{.cvdate}[Research group working on tutorials about statistical methods in Psychology]{.what}

Member of a national research group with the aim of writing tutorial for common and widely used statistical methods in Psychology. Main group members are Gianmarco Altoè (University of Padova), Enrico Toffalini (University of Padova) and other members from the Psicostat research group. We produced the following papers:

:::{.smaller}

- @Gambarota2024-cn
- @Gambarota2024-lp
- @Toffalini2024-vp

:::

[2019 - ongoing]{.cvdate}[Research group on visual consciousness and visual working memory]{.what}

Member of an international research group about visual consciousness for emotions and the relationship between visual working memory and consciousness. The principal investigators are Paola Sessa (University of Padova) and Naotsugu Tsuchiya (Monash University, Australia; [tLab](https://sites.google.com/monash.edu/tlab/people) research group). Other members of the research group are: Antonio Maffei (University of Padova), Roy Luria (University of Tel Aviv, Israel), Roberto Dell'Acqua (University of Padova), Thomas Quettier (University of Bologna). The collaboration produced the following publications:

:::{.smaller}

- @Maffei2024-qw
- @Quettier2023-yx
- @Gambarota2022-kr

:::

{{< pagebreak >}}

## Software

I mainly use R and the majority of research works are bounded with an R package, Shiny application or R code. The code and unpublished packages can be found on Github:

- [filippogambarota](https://github.com/filippogambarota): main personal repository
- [shared-research](https://github.com/shared-research): collection of papers with code and or packages
- [stat-teaching](https://github.com/stat-teaching): collection of teaching materials
- [psicostat](https://github.com/psicostat): repository of the Psicostat research group

### R Packages on CRAN

- [trackdown](https://github.com/ClaudioZandonella/trackdown): I have co-authored an R package to collaborate on R Markdown and Quarto documents. [[CRAN]](https://cran.r-project.org/web/packages/trackdown/index.html)

## Languages

- **Italian** `r flag("it")`: *mother tongue*
- **English** `r flag("gb")`/`r flag("us")`: *proficient*

## Research Skills

Rated as `r pb_skill(1)` (basic knowledge) to `r pb_skill(5)` (advanced knowledge).

### OS {.skills}

- Linux `r pb_skill(4)`
- Windows `r pb_skill(4)`
- MacOS `r pb_skill(3)`

### Programming languages {.skills}

- R `r pb_skill(5)`
- MATLAB `r pb_skill(3)`
- Python `r pb_skill(4)`
- Javascript `r pb_skill(2)`

### Writing {.skills}

- LaTeX `r pb_skill(4)`
- HTML `r pb_skill(3)`
- CSS `r pb_skill(3)`
- Pandoc `r pb_skill(3)`
- (R)Markdown `r pb_skill(5)`
- Quarto `r pb_skill(5)`

### Experiments {.skills}

- Psychopy `r pb_skill(5)`
- Eprime `r pb_skill(3)`
- Presentation `r pb_skill(4)`
- Psychtoolbox `r pb_skill(3)`

### EEG/ERP {.skills}

- EEGlab `r pb_skill(3)`
- ERPlab `r pb_skill(3)`
- Brainstorm `r pb_skill(1)`
- Brainvision Analyzer `r pb_skill(2)`

</br>
</br>

{{< pagebreak >}}

:::{.print-only}

[ITA] Autorizzo il trattamento dei dati personali presenti nel CV ai sensi del D.Lgs. 2018/101 e del GDPR (Regolamento UE 2016/679).

Il sottoscritto Filippo Gambarota, consapevole delle responsabilità anche penali nel caso di falsità in atti e dichiarazioni mendaci ai sensi dell’art.76 del DPR 445/2000, dichiara che i dati, le informazioni e le notizie riportate nel presente Curriculum Vitae corrispondono al vero.

[ENG] I authorize the processing of personal data included in my CV in accordance with Legislative Decree 2018/101 and the GDPR (Regulation EU 2016/679).

I hereby declare that the information and details provided in this Curriculum Vitae are true and accurate to the best of my knowledge, acknowledging the legal and criminal consequences of providing false statements as per Article 76 of Presidential Decree 445/2000.

</br>

[{{< meta date >}}]{.signaturedate}

</br>

[Filippo Gambarota]{.signaturename}
</br>
![](files/signature.png){.signature}
:::
